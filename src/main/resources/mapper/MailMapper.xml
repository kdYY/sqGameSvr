<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.sq.gameDemo.svr.game.mail.dao.MailMapper" >

    <resultMap id="BaseResultMap" type="org.sq.gameDemo.svr.game.mail.model.Mail" >
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="sender_un_id" property="senderUnId" jdbcType="INTEGER" />
        <result column="recevier_un_id" property="recevierUnId" jdbcType="INTEGER" />
        <result column="time" property="time" jdbcType="BIGINT" />
        <result column="keep_time" property="keepTime" jdbcType="BIGINT" />
        <result column="title" property="title" jdbcType="VARCHAR" />
        <result column="content" property="content" jdbcType="VARCHAR" />
        <result column="items_str" property="itemsStr" jdbcType="LONGVARCHAR" />
        <result column="is_read" property="isRead" jdbcType="BIT" />
        <result column="sender_name" property="senderName" jdbcType="VARCHAR" />
    </resultMap>

    <sql id="Example_Where_Clause" >
        <where >
            <foreach collection="oredCriteria" item="criteria" separator="or" >
                <if test="criteria.valid" >
                    <trim prefix="(" suffix=")" prefixOverrides="and" >
                        <foreach collection="criteria.criteria" item="criterion" >
                            <choose >
                                <when test="criterion.noValue" >
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue" >
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue" >
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue" >
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="Update_By_Example_Where_Clause" >
        <where >
            <foreach collection="example.oredCriteria" item="criteria" separator="or" >
                <if test="criteria.valid" >
                    <trim prefix="(" suffix=")" prefixOverrides="and" >
                        <foreach collection="criteria.criteria" item="criterion" >
                            <choose >
                                <when test="criterion.noValue" >
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue" >
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue" >
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue" >
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="Base_Column_List" >
        id, sender_un_id, recevier_un_id, time, keep_time, title, content, items_str, is_read,
        sender_name
    </sql>

    <select id="selectByExample" resultMap="BaseResultMap" parameterType="org.sq.gameDemo.svr.game.mail.model.MailExample" >
        select
        <if test="distinct" >
            distinct
        </if>
        <include refid="Base_Column_List" />
        from mail
        <if test="_parameter != null" >
            <include refid="Example_Where_Clause" />
        </if>
        <if test="orderByClause != null" >
            order by ${orderByClause}
        </if>
    </select>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        select
        <include refid="Base_Column_List" />
        from mail
        where id = #{id,jdbcType=INTEGER}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
        delete from mail
        where id = #{id,jdbcType=INTEGER}
    </delete>

    <delete id="deleteByExample" parameterType="org.sq.gameDemo.svr.game.mail.model.MailExample" >
        delete from mail
        <if test="_parameter != null" >
            <include refid="Example_Where_Clause" />
        </if>
    </delete>

    <insert id="insert" parameterType="org.sq.gameDemo.svr.game.mail.model.Mail" useGeneratedKeys="true" keyProperty="id">
        insert into mail ( sender_un_id, recevier_un_id,
            time, keep_time, title,
            content, items_str, is_read,
            sender_name)
        values ( #{senderUnId,jdbcType=INTEGER}, #{recevierUnId,jdbcType=INTEGER},
            #{time,jdbcType=BIGINT}, #{keepTime,jdbcType=BIGINT}, #{title,jdbcType=VARCHAR},
            #{content,jdbcType=VARCHAR}, #{itemsStr,jdbcType=LONGVARCHAR}, #{isRead,jdbcType=BIT},
            #{senderName,jdbcType=VARCHAR})
    </insert>

    <insert id="insertSelective" parameterType="org.sq.gameDemo.svr.game.mail.model.Mail" useGeneratedKeys="true" keyProperty="id">
        insert into mail
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                id,
            </if>
            <if test="senderUnId != null" >
                sender_un_id,
            </if>
            <if test="recevierUnId != null" >
                recevier_un_id,
            </if>
            <if test="time != null" >
                time,
            </if>
            <if test="keepTime != null" >
                keep_time,
            </if>
            <if test="title != null" >
                title,
            </if>
            <if test="content != null" >
                content,
            </if>
            <if test="itemsStr != null" >
                items_str,
            </if>
            <if test="isRead != null" >
                is_read,
            </if>
            <if test="senderName != null" >
                sender_name,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                #{id,jdbcType=INTEGER},
            </if>
            <if test="senderUnId != null" >
                #{senderUnId,jdbcType=INTEGER},
            </if>
            <if test="recevierUnId != null" >
                #{recevierUnId,jdbcType=INTEGER},
            </if>
            <if test="time != null" >
                #{time,jdbcType=BIGINT},
            </if>
            <if test="keepTime != null" >
                #{keepTime,jdbcType=BIGINT},
            </if>
            <if test="title != null" >
                #{title,jdbcType=VARCHAR},
            </if>
            <if test="content != null" >
                #{content,jdbcType=VARCHAR},
            </if>
            <if test="itemsStr != null" >
                #{itemsStr,jdbcType=LONGVARCHAR},
            </if>
            <if test="isRead != null" >
                #{isRead,jdbcType=BIT},
            </if>
            <if test="senderName != null" >
                #{senderName,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>

    <select id="countByExample" parameterType="org.sq.gameDemo.svr.game.mail.model.MailExample" resultType="java.lang.Integer" >
        select count(*) from mail
        <if test="_parameter != null" >
            <include refid="Example_Where_Clause" />
        </if>
    </select>

    <update id="updateByExampleSelective" parameterType="map" >
        update mail
        <set >
            <if test="record.id != null" >
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.senderUnId != null" >
                sender_un_id = #{record.senderUnId,jdbcType=INTEGER},
            </if>
            <if test="record.recevierUnId != null" >
                recevier_un_id = #{record.recevierUnId,jdbcType=INTEGER},
            </if>
            <if test="record.time != null" >
                time = #{record.time,jdbcType=BIGINT},
            </if>
            <if test="record.keepTime != null" >
                keep_time = #{record.keepTime,jdbcType=BIGINT},
            </if>
            <if test="record.title != null" >
                title = #{record.title,jdbcType=VARCHAR},
            </if>
            <if test="record.content != null" >
                content = #{record.content,jdbcType=VARCHAR},
            </if>
            <if test="record.itemsStr != null" >
                items_str = #{record.itemsStr,jdbcType=LONGVARCHAR},
            </if>
            <if test="record.isRead != null" >
                is_read = #{record.isRead,jdbcType=BIT},
            </if>
            <if test="record.senderName != null" >
                sender_name = #{record.senderName,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null" >
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>

    <update id="updateByExample" parameterType="map" >
        update mail
        set id = #{record.id,jdbcType=INTEGER},
        sender_un_id = #{record.senderUnId,jdbcType=INTEGER},
        recevier_un_id = #{record.recevierUnId,jdbcType=INTEGER},
        time = #{record.time,jdbcType=BIGINT},
        keep_time = #{record.keepTime,jdbcType=BIGINT},
        title = #{record.title,jdbcType=VARCHAR},
        content = #{record.content,jdbcType=VARCHAR},
        items_str = #{record.itemsStr,jdbcType=LONGVARCHAR},
        is_read = #{record.isRead,jdbcType=BIT},
        sender_name = #{record.senderName,jdbcType=VARCHAR}
        <if test="_parameter != null" >
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>

    <update id="updateByPrimaryKeySelective" parameterType="org.sq.gameDemo.svr.game.mail.model.Mail" >
        update mail
        <set >
            <if test="senderUnId != null" >
                sender_un_id = #{senderUnId,jdbcType=INTEGER},
            </if>
            <if test="recevierUnId != null" >
                recevier_un_id = #{recevierUnId,jdbcType=INTEGER},
            </if>
            <if test="time != null" >
                time = #{time,jdbcType=BIGINT},
            </if>
            <if test="keepTime != null" >
                keep_time = #{keepTime,jdbcType=BIGINT},
            </if>
            <if test="title != null" >
                title = #{title,jdbcType=VARCHAR},
            </if>
            <if test="content != null" >
                content = #{content,jdbcType=VARCHAR},
            </if>
            <if test="itemsStr != null" >
                items_str = #{itemsStr,jdbcType=LONGVARCHAR},
            </if>
            <if test="isRead != null" >
                is_read = #{isRead,jdbcType=BIT},
            </if>
            <if test="senderName != null" >
                sender_name = #{senderName,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>

    <update id="updateByPrimaryKey" parameterType="org.sq.gameDemo.svr.game.mail.model.Mail" >
        update mail
        set sender_un_id = #{senderUnId,jdbcType=INTEGER},
            recevier_un_id = #{recevierUnId,jdbcType=INTEGER},
            time = #{time,jdbcType=BIGINT},
            keep_time = #{keepTime,jdbcType=BIGINT},
            title = #{title,jdbcType=VARCHAR},
            content = #{content,jdbcType=VARCHAR},
            items_str = #{itemsStr,jdbcType=LONGVARCHAR},
            is_read = #{isRead,jdbcType=BIT},
            sender_name = #{senderName,jdbcType=VARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>
</mapper>