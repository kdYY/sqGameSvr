<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.sq.gameDemo.svr.game.transaction.dao.TradeMapper" >

    <resultMap id="BaseResultMap" type="org.sq.gameDemo.svr.game.transaction.model.Trade" >
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="start_time" property="startTime" jdbcType="BIGINT" />
        <result column="keep_time" property="keepTime" jdbcType="BIGINT" />
        <result column="owner_un_id" property="ownerUnId" jdbcType="INTEGER" />
        <result column="trade_model" property="tradeModel" jdbcType="INTEGER" />
        <result column="items_map_str" property="itemsMapStr" jdbcType="LONGVARCHAR" />
        <result column="item_info_id" property="itemInfoId" jdbcType="INTEGER" />
        <result column="count" property="count" jdbcType="INTEGER" />
        <result column="price" property="price" jdbcType="INTEGER" />
        <result column="finish" property="finish" jdbcType="BIT" />
        <result column="success" property="success" jdbcType="BIT" />
        <result column="accept_un_id" property="acceptUnId" jdbcType="INTEGER" />
    </resultMap>

    <sql id="Example_Where_Clause" >
        <where >
            <foreach collection="oredCriteria" item="criteria" separator="or" >
                <if test="criteria.valid" >
                    <trim prefix="(" suffix=")" prefixOverrides="and" >
                        <foreach collection="criteria.criteria" item="criterion" >
                            <choose >
                                <when test="criterion.noValue" >
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue" >
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue" >
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue" >
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="Update_By_Example_Where_Clause" >
        <where >
            <foreach collection="example.oredCriteria" item="criteria" separator="or" >
                <if test="criteria.valid" >
                    <trim prefix="(" suffix=")" prefixOverrides="and" >
                        <foreach collection="criteria.criteria" item="criterion" >
                            <choose >
                                <when test="criterion.noValue" >
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue" >
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue" >
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue" >
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="Base_Column_List" >
        id, start_time, keep_time, owner_un_id, trade_model, items_map_str, item_info_id,
        count, price, finish, success, accept_un_id
    </sql>

    <select id="selectByExample" resultMap="BaseResultMap" parameterType="org.sq.gameDemo.svr.game.transaction.model.TradeExample" >
        select
        <if test="distinct" >
            distinct
        </if>
        <include refid="Base_Column_List" />
        from trade
        <if test="_parameter != null" >
            <include refid="Example_Where_Clause" />
        </if>
        <if test="orderByClause != null" >
            order by ${orderByClause}
        </if>
    </select>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        select
        <include refid="Base_Column_List" />
        from trade
        where id = #{id,jdbcType=INTEGER}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
        delete from trade
        where id = #{id,jdbcType=INTEGER}
    </delete>

    <delete id="deleteByExample" parameterType="org.sq.gameDemo.svr.game.transaction.model.TradeExample" >
        delete from trade
        <if test="_parameter != null" >
            <include refid="Example_Where_Clause" />
        </if>
    </delete>

    <insert id="insert" parameterType="org.sq.gameDemo.svr.game.transaction.model.Trade" useGeneratedKeys="true" keyProperty="id">
        insert into trade (start_time, keep_time,
            owner_un_id, trade_model, items_map_str,
            item_info_id, count, price,
            finish, success, accept_un_id
            )
        values (#{startTime,jdbcType=BIGINT}, #{keepTime,jdbcType=BIGINT},
            #{ownerUnId,jdbcType=INTEGER}, #{tradeModel,jdbcType=INTEGER}, #{itemsMapStr,jdbcType=LONGVARCHAR},
            #{itemInfoId,jdbcType=INTEGER}, #{count,jdbcType=INTEGER}, #{price,jdbcType=INTEGER},
            #{finish,jdbcType=BIT}, #{success,jdbcType=BIT}, #{acceptUnId,jdbcType=INTEGER}
            )
    </insert>

    <insert id="insertSelective" parameterType="org.sq.gameDemo.svr.game.transaction.model.Trade" useGeneratedKeys="true" keyProperty="id">
        insert into trade
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                id,
            </if>
            <if test="startTime != null" >
                start_time,
            </if>
            <if test="keepTime != null" >
                keep_time,
            </if>
            <if test="ownerUnId != null" >
                owner_un_id,
            </if>
            <if test="tradeModel != null" >
                trade_model,
            </if>
            <if test="itemsMapStr != null" >
                items_map_str,
            </if>
            <if test="itemInfoId != null" >
                item_info_id,
            </if>
            <if test="count != null" >
                count,
            </if>
            <if test="price != null" >
                price,
            </if>
            <if test="finish != null" >
                finish,
            </if>
            <if test="success != null" >
                success,
            </if>
            <if test="acceptUnId != null" >
                accept_un_id,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                #{id,jdbcType=INTEGER},
            </if>
            <if test="startTime != null" >
                #{startTime,jdbcType=BIGINT},
            </if>
            <if test="keepTime != null" >
                #{keepTime,jdbcType=BIGINT},
            </if>
            <if test="ownerUnId != null" >
                #{ownerUnId,jdbcType=INTEGER},
            </if>
            <if test="tradeModel != null" >
                #{tradeModel,jdbcType=INTEGER},
            </if>
            <if test="itemsMapStr != null" >
                #{itemsMapStr,jdbcType=LONGVARCHAR},
            </if>
            <if test="itemInfoId != null" >
                #{itemInfoId,jdbcType=INTEGER},
            </if>
            <if test="count != null" >
                #{count,jdbcType=INTEGER},
            </if>
            <if test="price != null" >
                #{price,jdbcType=INTEGER},
            </if>
            <if test="finish != null" >
                #{finish,jdbcType=BIT},
            </if>
            <if test="success != null" >
                #{success,jdbcType=BIT},
            </if>
            <if test="acceptUnId != null" >
                #{acceptUnId,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>

    <select id="countByExample" parameterType="org.sq.gameDemo.svr.game.transaction.model.TradeExample" resultType="java.lang.Integer" >
        select count(*) from trade
        <if test="_parameter != null" >
            <include refid="Example_Where_Clause" />
        </if>
    </select>

    <update id="updateByExampleSelective" parameterType="map" >
        update trade
        <set >
            <if test="record.id != null" >
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.startTime != null" >
                start_time = #{record.startTime,jdbcType=BIGINT},
            </if>
            <if test="record.keepTime != null" >
                keep_time = #{record.keepTime,jdbcType=BIGINT},
            </if>
            <if test="record.ownerUnId != null" >
                owner_un_id = #{record.ownerUnId,jdbcType=INTEGER},
            </if>
            <if test="record.tradeModel != null" >
                trade_model = #{record.tradeModel,jdbcType=INTEGER},
            </if>
            <if test="record.itemsMapStr != null" >
                items_map_str = #{record.itemsMapStr,jdbcType=LONGVARCHAR},
            </if>
            <if test="record.itemInfoId != null" >
                item_info_id = #{record.itemInfoId,jdbcType=INTEGER},
            </if>
            <if test="record.count != null" >
                count = #{record.count,jdbcType=INTEGER},
            </if>
            <if test="record.price != null" >
                price = #{record.price,jdbcType=INTEGER},
            </if>
            <if test="record.finish != null" >
                finish = #{record.finish,jdbcType=BIT},
            </if>
            <if test="record.success != null" >
                success = #{record.success,jdbcType=BIT},
            </if>
            <if test="record.acceptUnId != null" >
                accept_un_id = #{record.acceptUnId,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null" >
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>

    <update id="updateByExample" parameterType="map" >
        update trade
        set id = #{record.id,jdbcType=INTEGER},
        start_time = #{record.startTime,jdbcType=BIGINT},
        keep_time = #{record.keepTime,jdbcType=BIGINT},
        owner_un_id = #{record.ownerUnId,jdbcType=INTEGER},
        trade_model = #{record.tradeModel,jdbcType=INTEGER},
        items_map_str = #{record.itemsMapStr,jdbcType=LONGVARCHAR},
        item_info_id = #{record.itemInfoId,jdbcType=INTEGER},
        count = #{record.count,jdbcType=INTEGER},
        price = #{record.price,jdbcType=INTEGER},
        finish = #{record.finish,jdbcType=BIT},
        success = #{record.success,jdbcType=BIT},
        accept_un_id = #{record.acceptUnId,jdbcType=INTEGER}
        <if test="_parameter != null" >
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>

    <update id="updateByPrimaryKeySelective" parameterType="org.sq.gameDemo.svr.game.transaction.model.Trade" >
        update trade
        <set >
            <if test="startTime != null" >
                start_time = #{startTime,jdbcType=BIGINT},
            </if>
            <if test="keepTime != null" >
                keep_time = #{keepTime,jdbcType=BIGINT},
            </if>
            <if test="ownerUnId != null" >
                owner_un_id = #{ownerUnId,jdbcType=INTEGER},
            </if>
            <if test="tradeModel != null" >
                trade_model = #{tradeModel,jdbcType=INTEGER},
            </if>
            <if test="itemsMapStr != null" >
                items_map_str = #{itemsMapStr,jdbcType=LONGVARCHAR},
            </if>
            <if test="itemInfoId != null" >
                item_info_id = #{itemInfoId,jdbcType=INTEGER},
            </if>
            <if test="count != null" >
                count = #{count,jdbcType=INTEGER},
            </if>
            <if test="price != null" >
                price = #{price,jdbcType=INTEGER},
            </if>
            <if test="finish != null" >
                finish = #{finish,jdbcType=BIT},
            </if>
            <if test="success != null" >
                success = #{success,jdbcType=BIT},
            </if>
            <if test="acceptUnId != null" >
                accept_un_id = #{acceptUnId,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>

    <update id="updateByPrimaryKey" parameterType="org.sq.gameDemo.svr.game.transaction.model.Trade" >
        update trade
        set start_time = #{startTime,jdbcType=BIGINT},
            keep_time = #{keepTime,jdbcType=BIGINT},
            owner_un_id = #{ownerUnId,jdbcType=INTEGER},
            trade_model = #{tradeModel,jdbcType=INTEGER},
            items_map_str = #{itemsMapStr,jdbcType=LONGVARCHAR},
            item_info_id = #{itemInfoId,jdbcType=INTEGER},
            count = #{count,jdbcType=INTEGER},
            price = #{price,jdbcType=INTEGER},
            finish = #{finish,jdbcType=BIT},
            success = #{success,jdbcType=BIT},
            accept_un_id = #{acceptUnId,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>
</mapper>